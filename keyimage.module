<?php

// @todo: 
// test with non-node entities,
// add $keyimage to page.tpl.php (and other templates?)
// add panels pane(s) - page one as opposed to node one
// inheritance for all entities (done terms as it's easy - nodes will have to specify hierarchy)
// better parallax, also use container without parallax for fixed height? (so overflow is hidden on larger screens, more image is shown on smaller ones to keep same ratio)
// move settings to a tab under content type settings? admin page is unwieldy
// parent inheritance to work for any entity type 
// add hook and/or sub module to define keyimage per path for non-entity pages

/**
* Implementation of hook_ctools_plugin_directory().
*/
function keyimage_ctools_plugin_directory($module, $plugin) {
  if ($module == 'ctools') {
    return 'plugins/' . $plugin;
  } 
}

function keyimage_menu(){
  
  $items = array();

  $items['admin/config/content/keyimage'] = array(

      'title' => 'Keyimage',
      'description' => 'Configuration for Keyimage module',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('keyimage_admin_form'),
      'access arguments' => array('administer themes'),
      'type' => MENU_NORMAL_ITEM,
    );
  $items['admin/config/content/keyimage/settings'] = array(

      'title' => 'Keyimage settings',
      'type' => MENU_DEFAULT_LOCAL_TASK,
    );

  $items['admin/config/content/keyimage/parallax'] = array(

      'title' => 'Parallax',
      'description' => 'Parallax settings for Keyimage',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('keyimage_parallax_admin_form'),
      'access arguments' => array('administer themes'),
      'type' => MENU_LOCAL_TASK,
    );

  return $items;

}

function keyimage_permission() {
  return array(
    'administer keyimage' => array(
      'title' => t('Administer Keyimage'),
      'description' => t('Change settings for keyimage module.'),
    ),
  );
}

function keyimage_form_node_type_form_alter(&$form, &$form_state){

  $type = $form['#node_type']->type;

  $options = form_helpers_get_field_options('node', $type, 'image');

  $entityreference_options = form_helpers_get_field_options('node', $type, array('taxonomy_term_reference','entityreference'));

  $form['keyimage'] = array(
    '#type' => 'fieldset',
    '#title' => 'Keyimage settings',
    '#collapsible' => 1,
    '#group' => 'additional_settings'
    );
  $form['keyimage']['keyimage_field_' . $type] = array(
    '#type' => 'select',
    '#multiple' => false,
    '#title' => 'Keyimage field for ' . $form['#node_type']->name,
    '#options' => $options,
    '#default_value'=>variable_get('keyimage_field_' . $type,0),
    );
  $form['keyimage']['keyimage_parent_' . $type] = array(
    '#type' => 'select',
    '#multiple' => false,
    '#title' => 'Parent keyimage field for ' . $form['#node_type']->name,
    '#description' => 'If no keyimage is found on the node, the entity referenced in this field will be checked (must be <em>entityreference</em> or <em>taxonomy term reference</em> field)<br /><strong>nb. entityreference currently only works when referenced entity is a node, soz</strong>',
    '#options' => $entityreference_options,
    '#default_value'=>variable_get('keyimage_parent_' . $type,0),
    );

  $entity_info = entity_get_info('node');
  $view_modes = array('default' => array('label' => t('Default'))) + $entity_info['view modes'];  
  $form['#view_modes'] = $view_modes;

  $image_styles = form_helpers_get_image_style_options();
  // @todo: js to hide this fieldset based on whether field selected
  $form['keyimage']['displays'] = array(
    '#type' => 'fieldset',
    '#title' => 'Image styles per display type',
    );

  foreach ($view_modes as $display => $data){
    $form['keyimage']['displays']['keyimage_style_' . $type . '_' . $display] = array(
      '#type' => 'select',
      '#multiple' => false,
      '#title' => 'Image style for ' . $data['label'],
      '#options' => $image_styles,
      '#default_value'=>variable_get('keyimage_style_' . $type . '_' . $display,0),
      );
  }

  $form['#submit'][] = 'keyimage_form_node_type_form_submit';
}

function keyimage_form_node_type_form_submit(&$form, &$form_state){

  $type = $form['#node_type']->type;
  variable_set('keyimage_field_' . $type,$form_state['values']['keyimage_field_' . $type]);
  variable_set('keyimage_parent_' . $type,$form_state['values']['keyimage_parent_' . $type]);
  //drupal_set_message(print_r($form_state['values'],true));
  foreach ($form['#view_modes'] as $display => $data){
    variable_set('keyimage_style_' . $type . '_' . $display,$form_state['values']['keyimage_style_' . $type . '_' . $display]);
  }

}

function keyimage_admin_form($form, &$form_state){

  $image_styles = form_helpers_get_image_style_options();

  foreach (entity_get_info() as $entity_type => $entity_info) {
    if ($entity_info['fieldable']) {
      
      $view_modes = array('default' => array('label' => t('Default'))) + $entity_info['view modes'];


      $form[$entity_type] = array(
        '#type' => 'fieldset',
        '#title' => $entity_info['label'],
        '#collapsible' => 'true',
        '#collapsed' => 'true',
        );


      foreach ($entity_info['bundles'] as $bundle_name => $bundle_info) {

        $form[$entity_type][$bundle_name] = array(
          '#type' => 'fieldset',
          '#title' => $bundle_info['label'],
          '#collapsible' => true,
          '#collapsed' => true,
          );

        $options = form_helpers_get_field_options($entity_type, $bundle_name,'image');

        // @todo: this var should have entity type in it too
        $form[$entity_type][$bundle_name]['keyimage_field_' . $bundle_name] = array(
          '#type' => 'select',
          '#multiple' => false,
          '#title' => 'Keyimage field for ' . $bundle_info['label'],
          '#options' => $options,
          '#default_value'=>variable_get('keyimage_field_' . $bundle_name,0),
          );


        // @todo: js to hide this fieldset based on whether field selected
        $form[$entity_type][$bundle_name]['displays'] = array(
          '#type' => 'fieldset',
          '#title' => 'Image styles per display type',
          );

        foreach ($view_modes as $display => $data){
          $form[$entity_type][$bundle_name]['displays']['keyimage_style_' . $bundle_name . '_' . $display] = array(
            '#type' => 'select',
            '#multiple' => false,
            '#title' => 'Image style for ' . $data['label'],
            '#options' => $image_styles,
            '#default_value'=>variable_get('keyimage_style_' . $bundle_name . '_' . $display,0),
            );
        }
      }
    }
  }

  return system_settings_form($form);

}

function keyimage_parallax_admin_form($form, &$form_state){

  foreach (entity_get_info() as $entity_type => $entity_info) {
    if ($entity_info['fieldable']) {
      
      $view_modes = array('default' => array('label' => t('Default'))) + $entity_info['view modes'];

      $form[$entity_type] = array(
        '#type' => 'fieldset',
        '#title' => $entity_info['label'],
        '#collapsible' => 'true',
        '#collapsed' => 'true',
        );


      foreach ($entity_info['bundles'] as $bundle_name => $bundle_info) {

        $form[$entity_type][$bundle_name] = array(
          '#type' => 'fieldset',
          '#title' => $bundle_info['label'],
          '#collapsible' => true,
          '#collapsed' => true,
          );

        $form[$entity_type][$bundle_name]['keyimage_parallax_' . $entity_type . '_' . $bundle_name] = array(
          '#type' => 'checkbox',
          '#title' => 'Use parallax style for ' . $bundle_info['label'],
          '#default_value'=>variable_get('keyimage_parallax_' . $entity_type . '_' . $bundle_name,0),
          );

        $form[$entity_type][$bundle_name]['keyimage_parallax_container_height_' . $entity_type . '_' . $bundle_name] = array(
          '#type' => 'textfield',
          '#title' => 'Container height (pixels)',
          '#default_value'=>variable_get('keyimage_parallax_container_height_' . $entity_type . '_' . $bundle_name,''),
          );


      }
    }
  }

  return system_settings_form($form);

}

function keyimage_entity_view($entity, $type, $view_mode, $langcode) {
  //drupal_set_message('keyimage_entity_view ' . $type . ' ' . $view_mode . ' ' . $langcode);
  $entity_info = entity_extract_ids($type, $entity);
  $bundle = $entity_info[2];
  $entity->content['keyimage'] = array(
    '#markup' => keyimage_get_keyimage($entity, $type, $bundle, $view_mode),
  );
}

function keyimage_preprocess(&$vars, $hook){
  //drupal_set_message('keyimage_preprocess ' . $hook);
}

function keyimage_preprocess_entity(&$vars){
  //drupal_set_message("keyimage_preprocess_entity " . print_r(array_keys($vars),true));
}

function keyimage_preprocess_node(&$vars){
  $node = $vars['node'];
  //drupal_set_message($vars['view_mode']);
  //if(isset($vars['content']['keyimage'])){
    $vars['keyimage'] = keyimage_get_keyimage($node, 'node', $node->type, $vars['view_mode']);
  //}
}

function keyimage_preprocess_page(&$vars){
  if(isset($vars['node'])){
    $node = $vars['node'];
    $vars['keyimage'] = keyimage_get_keyimage($node, 'node', $node->type, 'full');
    /*$field = variable_get('keyimage_field_' . $node->type,0); 
    if(isset($vars['content']['keyimage'])){
      $vars['keyimage'] = $vars['content']['keyimage']['#markup'];
    }*/
  }
  if(arg(0) == 'user' && is_numeric(arg(1))){
    $user = user_load(arg(1));
    $vars['keyimage'] = keyimage_get_keyimage($user, 'user', 'user', 'full');

  }
}


function keyimage_preprocess_html(&$vars){
  //drupal_set_message('keyimage_preprocess_html <pre>' . print_r($vars,true) . '</pre>');


  if(arg(0)=='node' && is_numeric(arg(1))){
    $node = node_load(arg(1));
    $field =variable_get('keyimage_field_' . $node->type,0);
    if(keyimage_get_imagefield('node',$node,$field)){
      $vars['classes_array'][] = 'with-keyimage';
    }
  }


  if(arg(0)=='taxonomy' && arg(1)=='term' && is_numeric(arg(2))){
    $term = taxonomy_term_load(arg(2));
    $field =variable_get('keyimage_field_' . $term->vocabulary_machine_name,0);
    if(keyimage_get_imagefield('taxonomy_term',$term,$field)){
      $vars['classes_array'][] = 'with-keyimage';
    }
  }



  // add 'has-keyimage' body class 

  // add $vars['keyimage'] based on any present, relevant entity  
  



  // this is for page
  // @todo: I want to be able to do this for any entity...
  if(isset($vars['node'])){
    $node = $vars['node'];
    //drupal_set_message($node->title);

    $field =variable_get('keyimage_field_' . $node->type,0);
    if(keyimage_get_imagefield('node',$node,$field)){
      $vars['classes_array'][] = 'with-keyimage';
    }


  }
}

function keyimage_get_imagefield($entity_type,$entity,$field){
  // @todo: inheritance for all entities
  $entities = array($entity);

  //drupal_set_message($entity_type . ' ' . $field);

  if($entity_type == 'taxonomy_term'){
    // this is a taxonomy term
    $entities = taxonomy_get_parents_all($entity->tid);
  }

  //drupal_set_message('entity: ' . print_r($entity,true));

  unset($entity);

  foreach($entities as $entity){
    //drupal_set_message($entity->name);
    $img_field = (isset($entity->language) && isset($entity->{$field}[$entity->language]) && !empty($entity->{$field}[$entity->language])) ? $entity->{$field}[$entity->language] 
        : (isset($entity->{$field}['und']) && !empty($entity->{$field}['und'])) ? $entity->{$field}['und']
        : null; 
    if($img_field) break;
  }

  //drupal_set_message(print_r($img_field,true));

  if(!$img_field){
    if($entity_type == 'node'){
      $parent_field = variable_get('keyimage_parent_' . $entity->type,0);

      //drupal_set_message($parent_field);

      if ($parent_field){
        
        $parent_field_type = db_query("SELECT type FROM {field_config} WHERE field_name = ?",array($parent_field))->fetchField();

        //drupal_set_message($parent_field_type);

        if($parent_field_type == 'entityreference'){
          $parent = isset($entity->{$parent_field}) && !empty($entity->{$parent_field}) ? node_load($entity->{$parent_field}['und'][0]['target_id']) : null;
          if($parent){
            $field = variable_get('keyimage_field_' . $parent->type,0);
            if($field){
              $img_field = keyimage_get_imagefield('node',$parent,$field);
            }
          }
        }else if($parent_field_type == 'taxonomy_term_reference'){

          $parent_term = isset($entity->{$parent_field}) && !empty($entity->{$parent_field}) ? taxonomy_term_load($entity->{$parent_field}['und'][0]['tid']) : null;

          if($parent_term){

            $field = variable_get('keyimage_field_' . $parent_term->vocabulary_machine_name,0);

            $img_field = keyimage_get_imagefield('taxonomy_term',$parent_term,$field);

          }
        }
      }
    }
  }
  return $img_field;

}
function keyimage_get_keyimage($entity, $entity_type, $bundle, $view_mode = 'full', $preset = null, $carousel = true){
  // @todo put some carousel settings in module..?



  $lang = isset($entity->language) ? $entity->language : 'und';

  $field = variable_get('keyimage_field_' . $bundle,0);
  $parent = variable_get('keyimage_parent_' . $bundle,0);


  $keyimage = null; 
  if($field || $parent){
    $keyimage_settings = keyimage_get_keyimage_settings($entity_type, $bundle);  

    //drupal_set_message(print_r($keyimage_settings,true));

    $preset = $preset ? $preset : (isset($keyimage_settings[$entity_type][$bundle][$view_mode]['preset']) ? $keyimage_settings[$entity_type][$bundle][$view_mode]['preset'] : 'thumbnail');


    //drupal_set_message($view_mode . 'preset ' . $preset);

    $img_field = keyimage_get_imagefield($entity_type,$entity,$field);

    //drupal_set_message(print_r($img_field,true));

    if($img_field){
      if($carousel !== false){
        $carousel = count($img_field) > 1 ? true : false;
      }
      $keyimage = (!$carousel  || (isset($keyimage_settings[$entity_type][$bundle][$view_mode]['carousel']) && $keyimage_settings[$entity_type][$bundle][$view_mode]['carousel'] == false)) ? 
        theme_image_style(array(
          'style_name' => $preset, 
          'path' => $img_field[0]['uri'], 
          'width' => isset($entity->{$field}[$lang]['width']) ? $entity->{$field}[$lang]['width'] : 0, 
          'height' => isset($entity->{$field}[$lang]['height']) ? $entity->{$field}[$lang]['height'] : 0, 
          'attributes' => array('class' => $preset)
          )
        ) : 
        theme('keyimage_carousel', array(
          'preset' => $preset, 
          'images' => $img_field
          )
        );
    }else if (isset($keyimage_settings[$entity_type][$bundle][$view_mode]['default'])){
      $keyimage = theme_image_style(array('style_name' => $preset, 'path' => $keyimage_settings[$entity_type][$bundle][$view_mode]['default'], 'width' => 0, 'height' => 0));
    }
  }

  if($keyimage && variable_get('keyimage_parallax_' . $entity_type . '_' . $bundle,0)){
    $height = variable_get('keyimage_parallax_container_height_' . $entity_type . '_' . $bundle,0);
    if($height){
      drupal_add_js(drupal_get_path('module','keyimage') . '/keyimage_para.js');
      $keyimage = '<div class="keyimage-para-wrapper" style="overflow: hidden; position: relative; height: ' . $height . 'px;">' . $keyimage . '</div>';
    };
  }



  return $keyimage;
}

function keyimage_get_keyimage_settings($entity = null, $bundle = null){

  $entities = entity_get_info();

  if($entity){
    $entities = array($entity => $entities[$entity]);
  }

  $keyimage_settings =[];

  foreach($entities as $entity_type => $entity_info){
    $view_modes = array('default' => array('label' => t('Default'))) + $entity_info['view modes'];
    $bundles = $entity_info['bundles'];
    if($bundle){
      $bundles = array($bundle => $bundles[$bundle]);
    }
    
    foreach ($bundles as $bundle_name => $bundle_info) {
      foreach ($view_modes as $display => $data){
        $keyimage_settings[$entity_type][$bundle_name][$display] = array(
          'preset' => variable_get('keyimage_style_' . $bundle_name . '_' . $display,''),
          );
      }
    }
  }


  /*foreach ($types as $type){
    $keyimage_settings[$type]['teaser'] = array('default' => null, 'carousel' => false,'preset' => 'main-320');
    $keyimage_settings[$type]['full']['default'] = null;
  }

  $keyimage_settings['opportunity']['full'] = array('default' => 'public:///generic/opportunity_waveshed.jpg');
  $keyimage_settings['publication']['full'] = array('preset' => 'main-320','carousel' => false);
  $keyimage_settings['post']['teaser']['preset'] = 'thumb-120';*/

  drupal_alter('keyimage_settings', $keyimage_settings);

  return $keyimage_settings;
}




function keyimage_theme($existing, $type, $theme, $path){

  $items = array();

  $items['keyimage_carousel'] = array(

    'template' => 'keyimage-carousel',
    'variables' => array(
      'preset' => null,
      'images' => array(),
    ),
  
  );

  return $items;

}

